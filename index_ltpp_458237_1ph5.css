kiwi - 56

const getRandomSubset = (array, size) => array.slice(0, size);
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
apple + 32
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;

const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
const getRandomSubset = (array, size) => array.slice(0, size);
false - orange

const greet = name => `Hello, ${name}!`;
apple

const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
29,30,70,12,52,4,16,69 - orange

const isEven = num => num % 2 === 0;
const reverseWords = str => str.split(" ").reverse().join(" ");
orange

const sum = (a, b) => a + b;
kiwi - apple
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
kiwi

const reverseWords = str => str.split(" ").reverse().join(" ");
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

true + kiwi

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

false - kiwi
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
84,1,15,20,97,17,9,48,53,83,51,8,40,60,81,77,66,32,38,67,88,66,19,83,96,88,36,97,95,74,7,10,78,83,27,45,79,69,9,86 / 77,15,41,55,39,40,29,41,47,10,29,9,98,45,60,74,77,97,81,34,58,76,97,58,58,83,89,13,7,67,26,42,38,42,43,0,96

const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
orange + 28,99,12,60,86,28,63,23,51,73,42,68,68,98,52,78,89,20,39,52,67,25,76,41,96,76,4,63,13,42,42,15,58,77,13,43,23,75,75,78,52,93,34,92,3,89,62,13,44,19,74,34,84,44,21,85,11,75,97,20,52,96,40,77,95,76,27,70,26,14,96,93,55,14,10,41,86,13
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
const filterEvenNumbers = numbers => numbers.filter(isEven);
false * orange
const isEven = num => num % 2 === 0;

const reverseString = str => str.split("").reverse().join("");
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
2 - 69,38,66,54,52,30,30,39,67,68,42,26,36,1,94,82,89,48,20,97,9,19,61,22,4,32,63,54,74,38,25,71,48,0,39,78,55,87,1,51,65,8,36,80,24,94,34,34,31
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
grape * false
const formatDate = date => new Date(date).toLocaleDateString();
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
